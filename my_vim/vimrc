    set nocompatible
    
    if has("syntax")
      syntax on            " 语法高亮
    endif
    colorscheme ron        " elflord ron peachpuff default 设置配色方案，vim自带的配色方案保存在/usr/share/vim/vim72/colors目录下

    filetype off
    filetype plugin on

    filetype plugin indent on

    set background=dark

    if has("autocmd")
      au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
      filetype plugin indent on
    endif

    set ignorecase       
	set smartcase        
    set autowrite        
    set autoindent        
    set smartindent        " 智能对齐方式
    set tabstop=4        " 设置制表符(tab键)的宽度
    set softtabstop=4     " 设置软制表符的宽度    
    set shiftwidth=4    " (自动) 缩进使用的4个空格
    set cindent            " 使用 C/C++ 语言的自动缩进方式
    set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s     "设置C/C++语言的具体缩进方式
    "set backspace=2    " 设置退格键可用
    set showmatch        " 设置匹配模式，显示匹配的括号
    set linebreak        " 整词换行
    set whichwrap=b,s,<,>,[,] " 光标从行首和行末时可以跳到另一行去
    "set hidden " Hide buffers when they are abandoned
    set mouse=a            " Enable mouse usage (all modes)    "使用鼠标
    set number            " Enable line number    "显示行号
    "set previewwindow    " 标识预览窗口
    set history=50        " set command history to 50    "历史记录50条

    set laststatus=2 " 总显示最后一个窗口的状态行；设为1则窗口数多于一个的时候显示最后一个窗口的状态行；0不显示最后一个窗口的状态行
    set ruler            "

    set showcmd            " 命令行显示输入的命令
    set showmode        " 命令行显示vim当前模式

    "--find setting--
    set incsearch        " 输入字符串就显示匹配点
    set hlsearch

	set guifont=Monospace\ 14 "set font and size
	let Tlist_Use_Right_Window=1
	let Tlist_File_Fold_Auto_Close=1
    let NERDTreeWinPos=1


	set tags+=~/.vim/tags/cpp
	set tags+=$MyProject/tags
	map <C-F12> :!ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<CR>
 

	"auto indent
	set autoindent
	set cindent
	set tabstop=4
	set softtabstop=4
	set shiftwidth=4
	
    "自动补全
	:inoremap ( ()<ESC>i
	:inoremap ) <c-r>=ClosePair(')')<CR>
	:inoremap { {<CR>}<ESC>O
	:inoremap } <c-r>=ClosePair('}')<CR>
	:inoremap [ []<ESC>i
	:inoremap ] <c-r>=ClosePair(']')<CR>
	:inoremap < <><ESC>i
	:inoremap > <c-r>=ClosePair('>')<CR>
	:inoremap " ""<ESC>i
	:inoremap ' ''<ESC>i
	function! ClosePair(char)
			if getline('.')[col('.') - 1] == a:char
					return "\<Right>"
			else
					return a:char
			endif
	endfunction
	filetype plugin indent on

    let g:SuperTabDefaultCompletionType="context"
    :set paste


